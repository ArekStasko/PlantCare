// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlantCare.Persistance.ReadDataManager;

#nullable disable

namespace PlantCare.Persistance.ReadDataManager.Migrations
{
    [DbContext(typeof(ReadDataContext))]
    [Migration("20240225173607_WriteDB migration")]
    partial class WriteDBmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlantCare.Domain.Models.HumidityMeasurement.HumidityMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PlantId");

                    b.ToTable("HumidityMeasurements");
                });

            modelBuilder.Entity("PlantCare.Domain.Models.Module.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("PlantCare.Domain.Models.Place.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("PlantCare.Domain.Models.Plant.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId")
                        .IsUnique();

                    b.HasIndex("PlaceId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("PlantCare.Domain.Models.HumidityMeasurement.HumidityMeasurement", b =>
                {
                    b.HasOne("PlantCare.Domain.Models.Module.Module", null)
                        .WithMany("HumidityMeasurements")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantCare.Domain.Models.Plant.Plant", null)
                        .WithMany("HumidityMeasurements")
                        .HasForeignKey("PlantId");
                });

            modelBuilder.Entity("PlantCare.Domain.Models.Plant.Plant", b =>
                {
                    b.HasOne("PlantCare.Domain.Models.Module.Module", null)
                        .WithOne("Plant")
                        .HasForeignKey("PlantCare.Domain.Models.Plant.Plant", "ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantCare.Domain.Models.Place.Place", null)
                        .WithMany("Plants")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantCare.Domain.Models.Module.Module", b =>
                {
                    b.Navigation("HumidityMeasurements");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("PlantCare.Domain.Models.Place.Place", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("PlantCare.Domain.Models.Plant.Plant", b =>
                {
                    b.Navigation("HumidityMeasurements");
                });
#pragma warning restore 612, 618
        }
    }
}
